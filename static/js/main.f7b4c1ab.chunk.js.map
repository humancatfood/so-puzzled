{"version":3,"sources":["utils/utils.ts","Game/Config/noseOffsets.tsx","utils/rng.ts","Game/Config/Config.tsx","Game/Config/grid.ts","Game/State/shuffling.ts","Game/State/state.ts","Game/State/context.tsx","Game/Components/Slot/Slot.styled.tsx","Game/Components/Slot/Slot.tsx","utils/ids.ts","Game/Components/Grid/Grid.styled.tsx","Game/Components/Grid/Grid.tsx","Game/Components/Piece/Piece.styled.tsx","Game/Components/Piece/Piece.tsx","Game/Components/Piece/useRenderPiece.tsx","Game/Components/Piece/drawClipPath.ts","Game/Components/Piece/StaticPiece.tsx","Game/Components/Piece/DragPiece.tsx","Game/Components/ReferenceImage/ReferenceImage.styled.tsx","Game/Components/ReferenceImage/ReferenceImage.tsx","utils/element-size.ts","Game/Components/Stage/Stage.styled.tsx","Game/Components/Stage/Stage.tsx","Game/Game.tsx","Game/GameWrapper.tsx","utils/image-loader.ts","StartScreen.tsx","images/kitty.jpg","App.tsx","index.tsx"],"names":["times","n","cb","results","Array","i","makeNoseOffsetGetter","numRows","numCols","rng","seed","m","Math","pow","f","X","makeRNG","offsets","y","x","innyOuty","Context","createContext","ConfigProvider","img","difficulty","otherProps","useState","imgWidth","width","imgHeight","height","setImageSize","value","useMemo","ratio","pieceSize","min","round","getGridDimensions","pieceWidth","pieceHeight","pieceWidthSrc","pieceHeightSrc","margin","marginSrc","getNoseOffset","Provider","useConfig","instance","useContext","Error","isInRect","rect","top","left","right","bottom","movePieceToStage","state","pieceId","slots","Object","entries","reduce","acc","key","stage","filter","id","concat","pieces","markPiecesToBeShuffled","ids","shufflePieces","obstacles","map","piece","result","avoid","tries","obstacle","random","shufflePiece","getSlotPiece","slotId","getStagePieces","undefined","getPiecesToShuffle","isSolved","GameStateProvider","props","setState","stagePieces","piecesToShuffle","movePieceToSlot","targetSlotId","currentOccupant","slotsEntries","slotID","slotPieceID","fromEntries","pieceIds","markAllPiecesToBeShuffled","values","reset","createState","debug","process","useGameState","SlotWrapper","styled","div","outline","isHighlighted","position","Slot","coordsToId","pieceInSlot","useDrop","accept","collect","monitor","isOver","drop","item","dropRef","ref","StaticPiece","GameGrid","display","GridRow","GridCol","border","borderSpacing","GridWrapper","transform","Grid","PieceWrapper","maxWidth","maxHeight","Draglayer","zIndex","PieceCanvas","canvas","Piece","canvasRef","useRef","useEffect","current","ctx","getContext","clearRect","config","isTop","isBottom","isLeft","isRight","beginPath","save","translate","moveTo","lineTo","bezierCurveTo","strokeStyle","lineWidth","lineJoin","stroke","restore","drawClipPath","clip","drawImage","useRenderPiece","useDrag","type","options","dropEffect","isDragging","dragRef","preview","getEmptyImage","captureDraggingState","data-testid","style","cursor","opacity","getItemStyles","currentOffset","WebkitTransform","DragPiece","useDragLayer","getItem","itemType","getItemType","getSourceClientOffset","Image","show","hint","ReferenceImage","imgRef","element","size","setSize","observer","ResizeObserver","contentRect","observe","unobserve","useElementSize","src","StageWrapper","Stage","forwardRef","forwardedRef","children","didDrop","offset","useImperativeHandle","Game","showHelp","stageRef","gridRef","length","getBoundingClientRect","toJSON","color","toString","GameWrapper","imgSrc","error","isLoading","addEventListener","message","useImageLoader","DndProvider","backend","HTML5Backend","GameStateStart","onStart","className","onClick","displayName","App","isStarted","setStarted","console","log","version","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7b4c1ab.chunk.js","sourcesContent":["export function times<Result>(n: number, cb: (i: number) => Result) {\n  const results: Result[] = new Array(n)\n  for (let i = 0; i < n; i += 1) {\n    results[i] = cb(i)\n  }\n  return results\n}\n","import { makeRNG } from '../../utils'\n\nexport type NoseOffset = {\n  innyOuty: boolean\n}\n\nexport type NoseOffsetGetter = (x: number, y: number) => NoseOffset\n\nexport function makeNoseOffsetGetter(\n  numRows: number,\n  numCols: number,\n): NoseOffsetGetter {\n  const rng = makeRNG(numRows * numCols)\n\n  const offsets: NoseOffset[][] = []\n  for (let y = 0; y < numRows + 1; y++) {\n    offsets[y] = []\n    for (let x = 0; x < numCols + 1; x++) {\n      offsets[y][x] = {\n        innyOuty: rng() > 0.5,\n      }\n    }\n  }\n\n  return (x, y) => offsets[y][x]\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator\nexport function makeRNG(seed: number) {\n  const m = Math.pow(2, 31) - 1\n  const a = 48271\n  const c = 1\n  const f = (n: number) => (n * a + c) % m\n  let X = f(seed)\n  return () => {\n    X = f(X)\n    return (X / 99999999) % 1\n  }\n}\n","import {\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n  PropsWithChildren,\n} from 'react'\nimport { getGridDimensions } from './grid'\nimport { makeNoseOffsetGetter } from './noseOffsets'\n\ntype Props = {\n  img: HTMLImageElement\n  difficulty: number\n}\n\ntype ConfigContext = {\n  numCols: number\n  numRows: number\n  imgWidth: number\n  imgHeight: number\n  pieceWidth: number\n  pieceHeight: number\n  pieceWidthSrc: number\n  pieceHeightSrc: number\n  margin: number\n  marginSrc: number\n  setImageSize: (size: { width: number; height: number }) => void\n  getNoseOffset: ReturnType<typeof makeNoseOffsetGetter>\n} & Props\n\nconst Context = createContext<ConfigContext | null>(null)\n\nexport function ConfigProvider({\n  img,\n  difficulty = 2,\n  ...otherProps\n}: PropsWithChildren<Props>) {\n  const [{ width: imgWidth, height: imgHeight }, setImageSize] = useState<{\n    width: number\n    height: number\n  }>(img)\n\n  const value = useMemo(() => {\n    const { numRows, numCols } = getGridDimensions(\n      imgWidth,\n      imgHeight,\n      difficulty,\n    )\n\n    const pieceWidth = imgWidth / numCols\n    const pieceHeight = imgHeight / numRows\n\n    const pieceWidthSrc = img.width / numCols\n    const pieceHeightSrc = img.height / numRows\n\n    const margin = Math.min(pieceWidth, pieceHeight) * 0.3\n    const marginSrc = Math.min(pieceWidthSrc, pieceHeightSrc) * 0.3\n\n    const getNoseOffset = makeNoseOffsetGetter(numRows, numCols)\n\n    return {\n      img,\n      difficulty,\n      numRows,\n      numCols,\n      imgWidth,\n      imgHeight,\n      pieceWidth,\n      pieceHeight,\n      pieceWidthSrc,\n      pieceHeightSrc,\n      margin,\n      marginSrc,\n      setImageSize,\n      getNoseOffset,\n    }\n  }, [img, imgWidth, imgHeight, difficulty])\n\n  return <Context.Provider value={value} {...otherProps} />\n}\n\nexport function useConfig(): ConfigContext {\n  const instance = useContext<ConfigContext | null>(Context)\n  if (!instance) {\n    throw new Error('`useConfig` must be called within `ConfigProvider`')\n  }\n  return instance\n}\n","type GridDimensions = {\n  numRows: number\n  numCols: number\n}\n\nexport function getGridDimensions(\n  width: number,\n  height: number,\n  ratio: number,\n): GridDimensions {\n  const pieceSize = Math.min(width, height) / ratio\n  return {\n    numRows: height ? Math.round(height / pieceSize) : 0,\n    numCols: width ? Math.round(width / pieceSize) : 0,\n  }\n}\n","export type Rect = {\n  top: number\n  bottom: number\n  left: number\n  right: number\n}\n\ntype Coords = {\n  top: number\n  left: number\n}\n\ntype ShuffleOptions = {\n  stage: Rect\n  avoid?: Rect[]\n  pieceWidth?: number\n  pieceHeight?: number\n}\n\nexport function shufflePiece({\n  stage,\n  avoid = [],\n  pieceWidth = 0,\n  pieceHeight = 0,\n}: ShuffleOptions): Coords {\n  let tries = 0\n  let result: Coords\n  const [obstacle] = avoid\n  do {\n    if (tries++ > 500) {\n      throw new Error('timeout!')\n    }\n    result = {\n      top: stage.top + Math.random() * (stage.bottom - stage.top - pieceHeight),\n      left:\n        stage.left + Math.random() * (stage.right - stage.left - pieceWidth),\n    }\n  } while (obstacle && isInRect(result, obstacle, pieceWidth, pieceHeight))\n  return result\n}\n\nexport function isInRect(\n  { top, left }: Coords,\n  rect: Rect,\n  pieceWidth: number,\n  pieceHeight: number,\n): boolean {\n  return (\n    left < rect.right &&\n    left + pieceWidth > rect.left &&\n    top + pieceHeight > rect.top &&\n    top < rect.bottom\n  )\n}\n","import { shufflePiece, Rect } from './shuffling'\n\nexport type ID = string\n\nexport interface IPiece {\n  id: ID\n  x: number\n  y: number\n  left?: number\n  top?: number\n}\n\nexport interface IGameState {\n  slots: Record<ID, ID>\n  stage: Array<ID>\n  pieces: Record<ID, IPiece>\n}\n\nexport function createState(numRows: number, numCols: number): IGameState {\n  const pieces: Record<ID, IPiece> = {}\n  const slots: Record<ID, ID> = {}\n\n  for (let y = 0; y < numRows; y += 1) {\n    for (let x = 0; x < numCols; x += 1) {\n      const id = `${x}-${y}`\n      pieces[id] = {\n        id,\n        x,\n        y,\n        left: 0,\n        top: 0,\n      }\n      slots[id] = id\n    }\n  }\n\n  return {\n    slots,\n    stage: [],\n    pieces,\n  }\n}\n\nexport function movePieceToStage(\n  state: IGameState,\n  pieceId: ID,\n  top?: number,\n  left?: number,\n): IGameState {\n  const slots = Object.entries(state.slots).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: value === pieceId ? null : value,\n    }),\n    {},\n  )\n\n  const stage = state.stage.filter(id => id !== pieceId).concat(pieceId)\n\n  const pieces = {\n    ...state.pieces,\n    [pieceId]: {\n      ...state.pieces[pieceId],\n      top,\n      left,\n    },\n  }\n\n  return { ...state, slots, stage, pieces }\n}\n\nexport function movePieceToSlot(\n  state: IGameState,\n  pieceId: ID,\n  targetSlotId: ID,\n): IGameState {\n  const currentOccupant = getSlotPiece(state, targetSlotId)\n\n  if (currentOccupant) {\n    state = markPiecesToBeShuffled(state, [currentOccupant.id])\n  }\n\n  const slotsEntries = Object.entries(state.slots).map(\n    ([slotID, slotPieceID]) => {\n      if (slotPieceID === pieceId) {\n        return [slotID, null]\n      } else if (slotID === targetSlotId) {\n        return [slotID, pieceId]\n      } else {\n        return [slotID, slotPieceID]\n      }\n    },\n  )\n\n  const pieces = {\n    ...state.pieces,\n    [pieceId]: {\n      ...state.pieces[pieceId],\n      top: 0,\n      left: 0,\n    },\n  }\n\n  return {\n    ...state,\n    pieces,\n    slots: Object.fromEntries(slotsEntries),\n    stage: state.stage.filter(id => id !== pieceId),\n  }\n}\n\nexport function markPiecesToBeShuffled(\n  state: IGameState,\n  ids: ID[],\n): IGameState {\n  for (const id of ids) {\n    state = movePieceToStage(state, id)\n  }\n  return state\n}\n\nexport function markAllPiecesToBeShuffled(state: IGameState): IGameState {\n  const ids = Object.values(state.slots)\n  return markPiecesToBeShuffled(state, ids)\n}\n\nexport function shufflePieces(\n  state: IGameState,\n  stage: Rect,\n  obstacles?: Rect[],\n  pieceWidth?: number,\n  pieceHeight?: number,\n): IGameState {\n  const pieces: Record<ID, IPiece> = {\n    ...state.pieces,\n    ...state.stage\n      .map(id => state.pieces[id])\n      .reduce((acc, piece) => {\n        acc[piece.id] = {\n          ...piece,\n          ...shufflePiece({ stage, avoid: obstacles, pieceWidth, pieceHeight }),\n        }\n        return acc\n      }, {} as Record<ID, IPiece>),\n  }\n\n  return {\n    ...state,\n    pieces,\n  }\n}\n\nexport function getSlotPiece(state: IGameState, slotId: ID): IPiece | null {\n  const pieceId = state.slots[slotId]\n  return pieceId ? state.pieces[pieceId] : null\n}\n\nexport function getStagePieces(state: IGameState): Array<IPiece> {\n  return state.stage\n    .map(id => state.pieces[id])\n    .filter(({ left, top }) => left !== undefined && top !== undefined)\n}\n\nexport function getPiecesToShuffle(state: IGameState): Array<IPiece> {\n  return state.stage\n    .map(id => state.pieces[id])\n    .filter(({ left, top }) => left === undefined && top === undefined)\n}\n\nexport function isSolved(state: IGameState): boolean {\n  for (const [slotId, pieceId] of Object.entries(state.slots)) {\n    if (!pieceId || pieceId !== slotId) {\n      return false\n    }\n  }\n  return true\n}\n","import {\n  useState,\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useMemo,\n} from 'react'\n\nimport { Rect } from './shuffling'\n\nimport {\n  createState,\n  movePieceToStage,\n  movePieceToSlot,\n  markPiecesToBeShuffled,\n  markAllPiecesToBeShuffled,\n  shufflePieces,\n  getSlotPiece,\n  getStagePieces,\n  getPiecesToShuffle,\n  isSolved,\n  ID,\n  IGameState,\n  IPiece,\n} from './state'\n\ntype GameStateContext = {\n  isSolved: boolean\n  stagePieces: IPiece[]\n  piecesToShuffle: IPiece[]\n  getSlotPiece: (slotID: ID) => IPiece | null\n  movePieceToStage: (pieceId: ID, top: number, left: number) => void\n  movePieceToSlot: (pieceId: ID, slotId: ID) => void\n  markPiecesToBeShuffled: (pieceIds: ID[]) => void\n  markAllPiecesToBeShuffled: () => void\n  reset: (numRows: number, numCols: number) => void\n  shufflePieces: (\n    stage: Rect,\n    obstacles: Rect[],\n    pieceWidth: number,\n    pieceHeight: number,\n  ) => void\n  debug: () => void\n}\n\nconst Context = createContext<GameStateContext | null>(null)\n\nexport function GameStateProvider(props: PropsWithChildren<unknown>) {\n  const [state, setState] = useState<IGameState>({\n    slots: {},\n    stage: [],\n    pieces: {},\n  })\n\n  const value = useMemo(\n    () => ({\n      isSolved: isSolved(state),\n      stagePieces: getStagePieces(state),\n      piecesToShuffle: getPiecesToShuffle(state),\n      getSlotPiece: (slotId: ID) => getSlotPiece(state, slotId),\n      movePieceToStage: (pieceId: ID, top: number, left: number) =>\n        setState(state => movePieceToStage(state, pieceId, top, left)),\n      movePieceToSlot: (pieceId: ID, slotId: ID) =>\n        setState(state => movePieceToSlot(state, pieceId, slotId)),\n      markPiecesToBeShuffled: (pieceIds: ID[]) =>\n        setState(state => markPiecesToBeShuffled(state, pieceIds)),\n      markAllPiecesToBeShuffled: () =>\n        setState(state => markAllPiecesToBeShuffled(state)),\n      shufflePieces: (\n        stage: Rect,\n        obstacles: Rect[],\n        pieceWidth: number,\n        pieceHeight: number,\n      ) =>\n        setState(state =>\n          shufflePieces(state, stage, obstacles, pieceWidth, pieceHeight),\n        ),\n      reset: (numRows: number, numCols: number) =>\n        setState(createState(numRows, numCols)),\n      debug: debug(state),\n    }),\n    [state],\n  )\n  return <Context.Provider value={value} {...props} />\n}\n\nexport function useGameState(): GameStateContext {\n  const instance = useContext<GameStateContext | null>(Context)\n  if (!instance) {\n    throw new Error('`useGameState` must be called within `GameStateProvider`')\n  }\n  return instance\n}\n\nfunction debug(state: IGameState) {\n  return () => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.log({ state })\n    }\n  }\n}\n","import styled, { CSSProperties } from 'styled-components'\n\nexport const SlotWrapper = styled.div((props: { isHighlighted: boolean }) => ({\n  outline: props.isHighlighted ? '3px solid rebeccapurple' : 'none', // TODO: make this show just the corners, so we get an outline without cutting across the noses and holes\n  position: 'absolute' as CSSProperties['position'],\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n}))\n","import { PropsWithChildren } from 'react'\n\nimport { useDrop } from 'react-dnd'\nimport { StaticPiece } from '..'\nimport { coordsToId } from '../../../utils'\nimport { useGameState } from '../../State'\nimport { SlotWrapper } from './Slot.styled'\n\ntype SlotProps = {\n  x: number\n  y: number\n}\n\nexport function Slot({ x, y }: PropsWithChildren<SlotProps>) {\n  const { getSlotPiece, movePieceToSlot } = useGameState()\n\n  const slotId = coordsToId(x, y)\n  const pieceInSlot = getSlotPiece(slotId)\n  const onDropPiece = (pieceId: string) => movePieceToSlot(pieceId, slotId)\n\n  const [{ isOver }, dropRef] = useDrop(() => ({\n    accept: 'piece',\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n    }),\n    drop: (item: { id: string }) => {\n      onDropPiece(item.id)\n    },\n  }))\n\n  return (\n    <SlotWrapper ref={dropRef} isHighlighted={isOver}>\n      {pieceInSlot ? <StaticPiece piece={pieceInSlot} /> : null}\n    </SlotWrapper>\n  )\n}\n","export function coordsToId(x: number, y: number): string {\n  return `${x}-${y}`\n}\n","import styled from 'styled-components'\n\nexport const GameGrid = styled.div({\n  display: 'table',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n})\n\nexport const GridRow = styled.div({\n  display: 'table-row',\n})\n\nexport const GridCol = styled.div({\n  display: 'table-cell',\n  position: 'relative',\n  border: '1px solid rgba(0, 0, 0, 0.4)',\n  borderSpacing: 0,\n})\n\nexport const GridWrapper = styled.div({\n  display: 'inline-block',\n  position: 'relative',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n})\n","import { times } from '../../../utils'\nimport { useConfig } from '../../Config'\nimport { Slot } from '../Slot'\nimport { GameGrid, GridCol, GridRow } from './Grid.styled'\n\nexport function Grid() {\n  const { numCols, numRows } = useConfig()\n  return (\n    <GameGrid>\n      {times(numRows, y => (\n        <GridRow key={y}>\n          {times(numCols, x => (\n            <GridCol key={x}>\n              <Slot x={x} y={y} />\n            </GridCol>\n          ))}\n        </GridRow>\n      ))}\n    </GameGrid>\n  )\n}\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\n\nexport const PieceWrapper = styled.div({\n  position: 'absolute',\n  maxWidth: '100%',\n  maxHeight: '100%',\n  ':hover': {\n    'z-index': '1',\n  },\n})\n\nexport const Draglayer = styled.div({\n  position: 'fixed',\n  'pointer-events': 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n})\n\nexport const PieceCanvas = styled.canvas(\n  ({ margin }: PropsWithChildren<{ margin: number }>) => ({\n    'pointer-events': 'none',\n    transform: `translate(${-margin}px, ${-margin}px)`,\n  }),\n)\n","import { useConfig } from '../../Config'\nimport { IPiece } from '../../State'\nimport { PieceCanvas } from './Piece.styled'\nimport { useRenderPiece } from './useRenderPiece'\n\ntype Props = {\n  piece: IPiece\n}\n\nexport function Piece({ piece: { x, y } }: Props) {\n  const { margin, pieceWidth, pieceHeight } = useConfig()\n\n  const canvasRef = useRenderPiece({ x, y })\n\n  return (\n    <PieceCanvas\n      ref={canvasRef}\n      width={pieceWidth + 2 * margin}\n      height={pieceHeight + 2 * margin}\n      margin={margin}\n    />\n  )\n}\n","import { useEffect, useRef } from 'react'\n\nimport { useConfig } from '../../Config'\nimport { IPiece } from '../../State'\nimport { drawClipPath } from './drawClipPath'\n\nexport function useRenderPiece({ x, y }: Pick<IPiece, 'x' | 'y'>) {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const {\n    img,\n    pieceWidth,\n    pieceHeight,\n    marginSrc,\n    margin,\n    pieceWidthSrc,\n    pieceHeightSrc,\n    numCols,\n    numRows,\n    getNoseOffset,\n  } = useConfig()\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef\n    if (canvas) {\n      const ctx = canvas.getContext('2d')\n\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n        drawClipPath(ctx, {\n          margin,\n          pieceWidth,\n          pieceHeight,\n          x,\n          y,\n          numRows,\n          numCols,\n          getNoseOffset,\n        })\n        ctx.save()\n        ctx.clip()\n\n        ctx.drawImage(\n          img,\n          x * pieceWidthSrc - marginSrc,\n          y * pieceHeightSrc - marginSrc,\n          pieceWidthSrc + 2 * marginSrc,\n          pieceHeightSrc + 2 * marginSrc,\n          0,\n          0,\n          pieceWidth + 2 * margin,\n          pieceHeight + 2 * margin,\n        )\n        ctx.restore()\n      }\n    }\n  }, [\n    x,\n    y,\n    img,\n    pieceWidth,\n    pieceHeight,\n    marginSrc,\n    margin,\n    pieceWidthSrc,\n    pieceHeightSrc,\n    numCols,\n    numRows,\n    getNoseOffset,\n  ])\n\n  return canvasRef\n}\n","import { NoseOffsetGetter } from '../../Config/noseOffsets'\n\ntype ClipPathConfig = {\n  margin: number\n  pieceWidth: number\n  pieceHeight: number\n  x: number\n  y: number\n  numRows: number\n  numCols: number\n  getNoseOffset: NoseOffsetGetter\n}\n\nexport function drawClipPath(\n  ctx: CanvasRenderingContext2D,\n  config: ClipPathConfig,\n) {\n  const {\n    margin,\n    pieceWidth,\n    pieceHeight,\n    x,\n    y,\n    numRows,\n    numCols,\n    getNoseOffset,\n  } = config\n  const isTop = y === 0\n  const isBottom = y === numRows - 1\n  const isLeft = x === 0\n  const isRight = x === numCols - 1\n\n  ctx.beginPath()\n  ctx.save()\n  ctx.translate(margin, margin)\n  ctx.moveTo(0, 0)\n\n  // const noseOffset = getNoseOffset(x, y)\n\n  if (!isTop) {\n    const { innyOuty } = getNoseOffset(x, y - 1)\n    ctx.lineTo(pieceWidth * 0.4, 0)\n    if (innyOuty) {\n      ctx.bezierCurveTo(\n        pieceWidth * 0.5 - margin,\n        margin,\n        pieceWidth * 0.5 + margin,\n        margin,\n        pieceWidth * 0.6,\n        0,\n      )\n    } else {\n      ctx.bezierCurveTo(\n        pieceWidth * 0.5 - margin,\n        -margin,\n        pieceWidth * 0.5 + margin,\n        -margin,\n        pieceWidth * 0.6,\n        0,\n      )\n    }\n  }\n  ctx.lineTo(pieceWidth, 0)\n\n  if (!isRight) {\n    const { innyOuty } = getNoseOffset(x, y)\n    ctx.lineTo(pieceWidth, pieceHeight * 0.4)\n    if (innyOuty) {\n      ctx.bezierCurveTo(\n        pieceWidth + margin,\n        pieceHeight * 0.5 - margin,\n        pieceWidth + margin,\n        pieceHeight * 0.5 + margin,\n        pieceWidth,\n        pieceHeight * 0.6,\n      )\n    } else {\n      ctx.bezierCurveTo(\n        pieceWidth - margin,\n        pieceHeight * 0.5 - margin,\n        pieceWidth - margin,\n        pieceHeight * 0.5 + margin,\n        pieceWidth,\n        pieceHeight * 0.6,\n      )\n    }\n  }\n  ctx.lineTo(pieceWidth, pieceHeight)\n\n  if (!isBottom) {\n    const { innyOuty } = getNoseOffset(x, y)\n    ctx.lineTo(pieceWidth * 0.6, pieceHeight)\n    if (!innyOuty) {\n      ctx.bezierCurveTo(\n        pieceWidth * 0.5 + margin,\n        pieceHeight - margin,\n        pieceWidth * 0.5 - margin,\n        pieceHeight - margin,\n        pieceWidth * 0.4,\n        pieceHeight,\n      )\n    } else {\n      ctx.bezierCurveTo(\n        pieceWidth * 0.5 + margin,\n        pieceHeight + margin,\n        pieceWidth * 0.5 - margin,\n        pieceHeight + margin,\n        pieceWidth * 0.4,\n        pieceHeight,\n      )\n    }\n  }\n  ctx.lineTo(0, pieceHeight)\n\n  if (!isLeft) {\n    const { innyOuty } = getNoseOffset(x - 1, y)\n    ctx.lineTo(0, pieceHeight * 0.6)\n    if (!innyOuty) {\n      ctx.bezierCurveTo(\n        -margin,\n        pieceHeight * 0.5 + margin,\n        -margin,\n        pieceHeight * 0.5 - margin,\n        0,\n        pieceHeight * 0.4,\n      )\n    } else {\n      ctx.bezierCurveTo(\n        margin,\n        pieceHeight * 0.5 + margin,\n        margin,\n        pieceHeight * 0.5 - margin,\n        0,\n        pieceHeight * 0.4,\n      )\n    }\n  }\n  ctx.lineTo(0, 0)\n\n  ctx.strokeStyle = 'white'\n  ctx.lineWidth = 2\n  ctx.lineJoin = 'round'\n  ctx.stroke()\n\n  ctx.restore()\n}\n","import { useEffect } from 'react'\nimport { useDrag } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\nimport { useConfig } from '../../Config'\n\nimport { IPiece } from '../../State'\nimport { Piece } from './Piece'\nimport { PieceWrapper } from './Piece.styled'\n\ntype Props = {\n  piece: IPiece\n}\n\nexport function StaticPiece({ piece }: Props) {\n  const { id, left, top } = piece\n  const { pieceWidth, pieceHeight } = useConfig()\n\n  const [{ isDragging }, dragRef, preview] = useDrag({\n    type: 'piece',\n    item: piece,\n    options: {\n      dropEffect: 'move',\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n\n  useEffect(() => {\n    preview(getEmptyImage(), {\n      captureDraggingState: true,\n    })\n  }, [preview])\n\n  return (\n    <PieceWrapper\n      ref={dragRef}\n      data-testid={`piece-${id}`}\n      style={{\n        width: pieceWidth,\n        height: pieceHeight,\n        top: `${top ?? 0}px`,\n        left: `${left ?? 0}px`,\n        cursor: 'grab',\n        opacity: isDragging ? 0 : 1,\n      }}\n    >\n      <Piece piece={piece} />\n    </PieceWrapper>\n  )\n}\n","import type { XYCoord } from 'react-dnd'\nimport { useDragLayer } from 'react-dnd'\n\nimport { Piece } from './Piece'\nimport { Draglayer, PieceWrapper } from './Piece.styled'\n\nfunction getItemStyles(currentOffset: XYCoord | null) {\n  if (!currentOffset) {\n    return {\n      display: 'none',\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform,\n  }\n}\n\nexport function DragPiece() {\n  const { itemType, isDragging, item, currentOffset } = useDragLayer(\n    monitor => ({\n      item: monitor.getItem(),\n      itemType: monitor.getItemType(),\n      currentOffset: monitor.getSourceClientOffset(),\n      isDragging: monitor.isDragging(),\n    }),\n  )\n\n  if (!isDragging || itemType !== 'piece') {\n    return null\n  }\n\n  return (\n    <Draglayer>\n      <PieceWrapper\n        style={{\n          ...getItemStyles(currentOffset),\n          cursor: 'grabbing',\n        }}\n      >\n        <Piece piece={item} />\n      </PieceWrapper>\n    </Draglayer>\n  )\n}\n","import styled from 'styled-components'\n\nexport const Image = styled.img(\n  ({ show, hint }: { show: boolean; hint: boolean }) => ({\n    maxWidth: '100%',\n    maxHeight: '50vh',\n    opacity: show ? 1 : hint ? 0.2 : 0,\n  }),\n)\n","import { useRef, useEffect } from 'react'\nimport { useElementSize } from '../../../utils'\nimport { useConfig } from '../../Config'\nimport { Image } from './ReferenceImage.styled'\n\ntype ReferenceImageProps = {\n  show?: boolean\n  hint?: boolean\n}\n\nexport function ReferenceImage({\n  show = false,\n  hint = false,\n}: ReferenceImageProps) {\n  const imgRef = useRef<HTMLImageElement>(null)\n\n  const [width, height] = useElementSize(imgRef.current)\n\n  const { img, setImageSize } = useConfig()\n\n  useEffect(() => {\n    setImageSize({ width, height })\n  }, [width, height, setImageSize])\n\n  return <Image src={img.src} show={show} hint={hint} ref={imgRef} />\n}\n","import { useEffect, useState } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\n\ntype Size = [number, number]\n\nexport function useElementSize(element: HTMLElement | null): Size {\n  const [size, setSize] = useState<Size>([0, 0])\n\n  useEffect(() => {\n    if (element) {\n      const observer = new ResizeObserver(\n        (entries: Array<ResizeObserverEntry>) => {\n          const { contentRect } = entries[0]\n          setSize([contentRect.width, contentRect.height])\n        },\n      )\n      observer.observe(element)\n      return () => observer.unobserve(element)\n    }\n  }, [element])\n\n  return size\n}\n","import styled from 'styled-components'\n\nexport const StageWrapper = styled.div`\n  boxShadow: ${({ isHighlighted }: { isHighlighted: boolean }) =>\n    isHighlighted ? '0px 0px 16px green inset' : 'none'},\n  margin-right: auto;\n  margin-left: auto;\n  padding: 15px 20px;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`\n","import {\n  PropsWithChildren,\n  forwardRef,\n  useEffect,\n  useRef,\n  useImperativeHandle,\n} from 'react'\nimport { useDrop } from 'react-dnd'\nimport { StaticPiece } from '..'\nimport { useGameState } from '../../State'\nimport { StageWrapper } from './Stage.styled'\n\ntype Ref = HTMLDivElement | null\n\nexport const Stage = forwardRef<Ref, PropsWithChildren<unknown>>(\n  ({ children }, forwardedRef) => {\n    const ref = useRef<HTMLDivElement>(null)\n\n    const { movePieceToStage, stagePieces } = useGameState()\n\n    const [{ isOver }, dropRef] = useDrop(() => ({\n      accept: 'piece',\n      collect: monitor => ({\n        isOver: monitor.isOver(),\n      }),\n      drop: (item: { id: string }, monitor) => {\n        if (!monitor.didDrop()) {\n          const offset = monitor.getSourceClientOffset()\n          movePieceToStage(item.id, offset?.y ?? 0, offset?.x ?? 0)\n        }\n      },\n    }))\n\n    useEffect(() => {\n      dropRef(ref)\n    })\n\n    useImperativeHandle<Ref, Ref>(forwardedRef, () => ref.current)\n\n    return (\n      <StageWrapper isHighlighted={isOver} ref={ref}>\n        {children}\n        {stagePieces.map(piece => {\n          if (piece.top != null && piece.left != null) {\n            return <StaticPiece key={piece.id} piece={piece} />\n          }\n        })}\n      </StageWrapper>\n    )\n  },\n)\n\nStage.displayName = 'Stage'\n","import { useState, useEffect, useRef } from 'react'\n\nimport {\n  DragPiece,\n  Grid,\n  GridWrapper,\n  ReferenceImage,\n  Stage,\n} from './Components'\nimport { useConfig } from './Config'\nimport { useGameState } from './State'\n\nexport function Game() {\n  const [showHelp] = useState<boolean>(false)\n  const stageRef = useRef<HTMLDivElement>(null)\n  const gridRef = useRef<HTMLDivElement>(null)\n\n  const { numRows, numCols, pieceWidth, pieceHeight } = useConfig()\n\n  const {\n    isSolved,\n    piecesToShuffle,\n    // markAllPiecesToBeShuffled,\n    shufflePieces,\n    reset,\n  } = useGameState()\n\n  useEffect(() => {\n    if (piecesToShuffle.length && stageRef.current) {\n      shufflePieces(\n        stageRef.current?.getBoundingClientRect().toJSON(),\n        [gridRef.current?.getBoundingClientRect().toJSON()],\n        pieceWidth,\n        pieceHeight,\n      )\n    }\n  }, [piecesToShuffle, shufflePieces, pieceWidth, pieceHeight])\n\n  useEffect(() => {\n    reset(numRows, numCols)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [numRows, numCols])\n\n  // useEffect(() => {\n  //   if (isSolved) {\n  //     markAllPiecesToBeShuffled()\n  //   }\n  // }, [isSolved])\n\n  return (\n    <>\n      <p style={{ color: 'white' }}>Solved: {isSolved.toString()}</p>\n      <Stage ref={stageRef}>\n        <GridWrapper ref={gridRef}>\n          <ReferenceImage hint={showHelp} />\n          <Grid />\n        </GridWrapper>\n        <DragPiece />\n      </Stage>\n    </>\n  )\n}\n","import { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nimport { useImageLoader } from '../utils'\nimport { ConfigProvider } from './Config'\nimport { Game } from './Game'\nimport { GameStateProvider } from './State'\n\nexport type GameWrapperProps = {\n  imgSrc: string\n  difficulty: number\n}\n\nexport function GameWrapper({ imgSrc, difficulty }: GameWrapperProps) {\n  const { error, img, isLoading } = useImageLoader(imgSrc)\n\n  if (error) {\n    return (\n      <>\n        <h1>Error:</h1>\n        <h2>{error}</h2>\n      </>\n    )\n  }\n\n  if (isLoading) {\n    return <h1>loading</h1>\n  }\n\n  if (img) {\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <ConfigProvider difficulty={difficulty} img={img}>\n          <GameStateProvider>\n            <Game />\n          </GameStateProvider>\n        </ConfigProvider>\n      </DndProvider>\n    )\n  }\n\n  return null\n}\n","import { useEffect, useState } from 'react'\n\nexport function useImageLoader(src: string) {\n  const [{ img, error, isLoading }, setState] = useState<{\n    img?: HTMLImageElement\n    error?: string\n    isLoading?: boolean\n  }>({})\n\n  useEffect(() => {\n    setState(state => ({ ...state, error: undefined, isLoading: true }))\n    const img = new Image()\n    img.addEventListener('load', () =>\n      setState({ img, error: undefined, isLoading: false }),\n    )\n    img.addEventListener('error', ({ message }) =>\n      setState(state => ({\n        ...state,\n        error: message || 'image could not be loaded :(',\n        isLoading: false,\n      })),\n    )\n    img.src = src\n  }, [src])\n\n  return {\n    error,\n    img,\n    isLoading,\n  }\n}\n","type GameStateStartProps = {\n  onStart: () => void\n}\n\n// The first game state. It just shows an introduction and a button that the player can click\n// when they're ready.\nexport default function GameStateStart({ onStart }: GameStateStartProps) {\n  return (\n    <>\n      <header className=\"page-header\">\n        <h1>\n          So Puzzled!! <br /> {'  '}\n          <small>\n            A little puzzle game for practice, written in React and jQueryUI\n          </small>\n        </h1>\n      </header>\n\n      <main className=\"jumbotron text-center\">\n        <h2>How to play:</h2>\n\n        <ol className=\"text-left inline-block\">\n          <li>\n            Click the <strong className=\"\">Start</strong> button\n          </li>\n          <li>Memorize the image</li>\n          <li>Piece the image back together</li>\n          <li>.. profit?</li>\n        </ol>\n\n        <p>\n          <button\n            type=\"button\"\n            className=\"btn btn-success btn-lg\"\n            onClick={onStart}\n          >\n            Start Puzzling\n          </button>\n        </p>\n      </main>\n    </>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/kitty.9149cd00.jpg\";","import { useState } from 'react'\n\nimport Game from './Game'\nimport StartScreen from './StartScreen'\nimport img from './images/kitty.jpg'\n\nexport default function App() {\n  const [isStarted, setStarted] = useState<boolean>(true)\n\n  if (isStarted) {\n    return <Game imgSrc={img} difficulty={3} />\n  } else {\n    return <StartScreen onStart={() => setStarted(true)} />\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import reportWebVitals from './reportWebVitals';\n\nimport { version } from '../package.json'\n\nimport App from './App'\n\nconsole.log(`Version: ${version}`)\nconsole.log(`Build: ${process.env.NODE_ENV}`)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log.bind(null, 'web vitals:'));\n"],"sourceRoot":""}